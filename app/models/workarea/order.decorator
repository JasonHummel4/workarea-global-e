module Workarea
  decorate Order, with: :global_e do
    decorated do
      field :currency, type: String, default: -> { Money.default_currency.iso_code }
      field :global_e, type: Boolean, default: false
      field :global_e_id, type: String
      field :global_e_token, type: String, default: -> { SecureRandom.hex(5).upcase }
      field :global_e_approved_at, type: Time

      field :duties_guaranteed, type: Boolean, default: false

      field :international_subtotal_price, type: Money
      field :international_shipping_total, type: Money
      field :discounted_international_shipping_total, type: Money
      field :total_duties_price, type: Money
      field :international_total_price, type: Money
      field :contains_clearance_fees_price, type: Money

      embeds_many :discount_adjustments,
        class_name: 'Workarea::PriceAdjustment',
        extend: PriceAdjustmentExtension

      embeds_many :international_discount_adjustments,
        class_name: 'Workarea::PriceAdjustment',
        extend: PriceAdjustmentExtension

      index({ global_e_token: 1 })
      index({ global_e_id: 1 })
    end

    # All international price adjustments on this order.
    #
    # @return [PriceAdjustmentSet]
    #
    def international_price_adjustments
      PriceAdjustmentSet.new(items.flat_map(&:international_price_adjustments))
      # FlowPriceAdjustmentSet.new(items.flat_map(&:flow_price_adjustments), experience)
    end

    # Do not run callbacks if global_e order, they will be run after
    # PerformOrderPayment
    def place
      return super unless purchasable? && global_e?

      self.placed_at = Time.current
      with(write: { w: "majority", j: true }) { save }
    end

    def global_e_approve!
      run_callbacks :place do
        update_attributes(global_e_approved_at: Time.current)
      end
    end

    def discount_ids
      super + discount_adjustments
        .map { |pa| pa.data['discount_id'] }
        .compact
        .uniq
    end
  end
end
